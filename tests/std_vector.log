CONSTRUCTORS TEST

The contents of second should be 4 ints with a value of 100: 100 100 100 100

The contents of third should identical to second (constructed using iterators): 100 100 100 100

The contents of fourth should identical to second and third (copy constructor): 100 100 100 100

CAPACITY FUNCTIONS TEST

Vector size: 4
Vector capacity: 4
Vector max_size: 2305843009213693951

Changing values of third
The contents of third are: 0 1 2 3

Checking if checking the values of third didn't affect second
The contents of second are: 100 100 100 100

Test front
0

Test back
3

Test []
1

Test at
Test at out of range

Test at in range
2


Test pop_back
The contents of third before pop_back are: 0 1 2 3
The contents of third after 2 pop_back are: 0 1
Testing multiple pop_back in a row to empty the vector, this should NOT crash

Test void assign(size_type n, const value_type &value), here third.assign(15, 3)
The contents of third should be 3 repeated 15 times: 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3

Test template <class InputIt> void assign(InputIt first, InputIt last), here second.assign(third.begin(), third.begin() + 7)
The contents of second before assign are: 100 100 100 100
The contents of second after assign are: 3 3 3 3 3 3 3

Test resize
The capacity of third before resize is: 15
The capacity of third after resize is: 30

Test reserve
Testing when the reserved size if inferior to the current capacity
Contents of third before reserve(10): 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Contents of third after reserve(10): 3 3 3 3 3 3 3 3 3 3

Test push_back
Contents of third before push_back: 3 3 3 3 3 3 3 3 3 3
Pushing back 1, 2, 3, 4, 5
Contents of third after push_back: 3 3 3 3 3 3 3 3 3 3 1 2 3 4 5

Test Insert
Testing void insert(iterator position, size_type n, const value_type& val)
Contents of third after third.insert(third.begin() + 10, 5, 7): 3 3 3 3 3 3 3 3 3 3 7 7 7 7 7 1 2 3 4 5

Testing iterator insert(iterator position, const value_type &val)
Contents of third after third.insert(third.begin() + 2, 9): 3 3 9 3 3 3 3 3 3 3 3 7 7 7 7 7 1 2 3 4 5

Testing template<class InputIt> void insert(iterator position, InputIterator first, InputIterator last)
Contents of third after third.insert(third.begin() + 3, fourth.begin(), fourth.end()): 3 3 9 100 100 100 100 3 3 3 3 3 3 3 3 7 7 7 7 7 1 2 3 4 5

Testing erase
Testing iterator erase(iterator position)
Contents of third after third.erase(third.begin() + 2): 3 3 100 100 100 100 3 3 3 3 3 3 3 3 7 7 7 7 7 1 2 3 4 5
Testing iterator erase(iterator first, iterator last
Contents of third after third.erase(third.end() - 5, third.end()): 3 3 100 100 100 100 3 3 3 3 3 3 3 3 7 7 7 7 7

Testing swap
Contents of third after swapping with second: 3 3 3 3 3 3 3
Contents of second after swapping with third: 3 3 100 100 100 100 3 3 3 3 3 3 3 3 7 7 7 7 7

Testing Relational operators
second and third are different
second is superior to third
third is inferior to second
first and second are equal
